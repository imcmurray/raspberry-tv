- name: Add user to video group for framebuffer access
  user:
    name: "{{ service_user }}"
    groups: video
    append: yes

- name: Check for config.txt location
  stat:
    path: "{{ item }}"
  register: config_locations
  loop:
    - /boot/firmware/config.txt
    - /boot/config.txt

- name: Set boot config path
  set_fact:
    boot_config_path: "{{ item.item }}"
  loop: "{{ config_locations.results }}"
  when: item.stat.exists

- name: Configure dual HDMI setup
  lineinfile:
    path: "{{ boot_config_path }}"
    line: '{{ item }}'
  loop:
    - '# Dual HDMI Configuration'
    - '# HDMI0 (fb0) - Console/SSH access'
    - 'hdmi_group:0=1'
    - 'hdmi_mode:0=16'
    - '# HDMI1 (fb1) - Slideshow display' 
    - 'hdmi_group:1=1'
    - 'hdmi_mode:1=16'
    - '# Enable both HDMI outputs'
    - 'hdmi_force_hotplug:0=1'
    - 'hdmi_force_hotplug:1=1'
    - '# Use legacy graphics for separate framebuffers'
    - 'dtoverlay=vc4-fkms-v3d'
    - '# Disable KMS overlays to get separate framebuffers'
    - '#dtoverlay=vc4-kms-v3d'
  notify: reboot
  when: boot_config_path is defined

- name: Check for cmdline.txt location
  stat:
    path: "{{ item }}"
  register: cmdline_locations
  loop:
    - /boot/firmware/cmdline.txt
    - /boot/cmdline.txt

- name: Set boot cmdline path
  set_fact:
    boot_cmdline_path: "{{ item.item }}"
  loop: "{{ cmdline_locations.results }}"
  when: item.stat.exists

- name: Configure console output to fb0 and disable screen blanking
  shell: |
    if ! grep -q "consoleblank=0" {{ boot_cmdline_path }}; then
      sed -i 's/$/ consoleblank=0/' {{ boot_cmdline_path }}
    fi
    if ! grep -q "fbcon=map:0" {{ boot_cmdline_path }}; then
      sed -i 's/$/ fbcon=map:0/' {{ boot_cmdline_path }}
    fi
  notify: reboot
  when: boot_cmdline_path is defined