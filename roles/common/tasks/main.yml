- name: Detect operating system
  shell: |
    if [ -f /etc/rpi-issue ]; then
      echo "raspios"
    elif grep -q "Ubuntu" /etc/os-release; then
      echo "ubuntu"
    else
      echo "unknown"
    fi
  register: detected_os
  changed_when: false

- name: Set OS fact
  set_fact:
    target_os: "{{ detected_os.stdout }}"

- name: Warn about Ubuntu compatibility
  debug:
    msg: |
      WARNING: Ubuntu detected on Raspberry Pi.
      This system is designed for Raspberry Pi OS. Some features may not work:
      - HDMI power management (vcgencmd)
      - Boot configuration (/boot/config.txt)
      Consider switching to Raspberry Pi OS for full functionality.
  when: target_os == "ubuntu"

- name: Update package list
  apt:
    update_cache: yes

- name: Upgrade packages
  apt:
    upgrade: safe

- name: Install pip and venv
  apt:
    name:
      - python3-pip
      - python3-venv
    state: present

- name: Install Chromium browser
  apt:
    name: chromium-browser
    state: present

- name: Install ChromeDriver
  apt:
    name: chromium-chromedriver
    state: present

- name: Install OpenGL libraries for OpenCV (Ubuntu)
  apt:
    name:
      - libgl1
      - libglx-mesa0
      - libglib2.0-0
    state: present
  when: target_os == "ubuntu"

- name: Install graphics and general X11/Wayland dev libraries for eframe (Ubuntu)
  apt:
    name:
      - libdrm2 # Already present, good to keep
      - libgbm1 # Already present, good to keep
      - mesa-utils # Already present, good to keep
      - libgl1-mesa-dri # Already present, good to keep
      # eframe/winit specific dependencies (many via gtk)
      - libgtk-3-dev
      - libxcb-render0-dev
      - libxcb-shape0-dev
      - libxcb-xfixes0-dev
      - libxkbcommon-dev
      - libgl1-mesa-dev # General OpenGL dev
      - libegl1-mesa-dev # EGL support
      - libfontconfig1-dev # Font rendering
      # Wayland support (optional but good to have)
      - libwayland-dev
      - libwayland-cursor-dev
      - libwayland-egl1-mesa-dev
      # Misc that might be pulled by GTK but good to be explicit for some systems
      - libatk1.0-dev
      - libcairo2-dev
      - libgdk-pixbuf2.0-dev
      - libpango1.0-dev
      - kbd # For framebuffer support, was already there
      - fbset # For framebuffer support, was already there
    state: present
    update_cache: yes
  when: target_os == "ubuntu"

- name: Install build-essential
  apt:
    name: build-essential
    state: present

- name: Install FFmpeg development libraries
  apt:
    name:
      - libavformat-dev
      - libavcodec-dev
      - libavutil-dev
      - libswscale-dev
      - libavdevice-dev # Often needed for complete FFmpeg functionality
      - pkg-config      # Required by ffmpeg-next build scripts
    state: present

- name: Check if rustup is installed
  stat:
    path: "~/.cargo/bin/rustup"
  register: rustup_stat_result

- name: Download rustup installer
  get_url:
    url: https://sh.rustup.rs
    dest: /tmp/rustup-init.sh
    mode: '0755'
  when: not rustup_stat_result.stat.exists

- name: Install rustup
  shell: /tmp/rustup-init.sh -y --no-modify-path --default-toolchain stable
  args:
    creates: "~/.cargo/bin/rustup"
  when: not rustup_stat_result.stat.exists
  environment:
    RUSTUP_HOME: "~/.cargo"
    CARGO_HOME: "~/.cargo"

- name: Add cargo to PATH
  lineinfile:
    path: "~/.bashrc"
    line: 'export PATH="$HOME/.cargo/bin:$PATH"'
    create: yes
  # Ansible's become doesn't work well with ~ expansion in shell module
  # So, we run this as the remote user directly for `source ~/.bashrc` to work in subsequent steps if needed.
  # However, systemd services will need explicit PATH or full path to cargo/rustc if not system-wide.

- name: Install DirectFB (Ubuntu - optional)
  apt:
    name: libdirectfb-1.7-7
    state: present
  when: target_os == "ubuntu"
  ignore_errors: yes

- name: Configure Ubuntu for hardware display output
  block:
    - name: Ensure video group exists
      group:
        name: video
        state: present
    
    - name: Add user to video and render groups for GPU access
      user:
        name: "{{ service_user }}"
        groups: video,render
        append: yes
    
    - name: Create DRM device directory if missing
      file:
        path: /dev/dri
        state: directory
        mode: '0755'
    
    - name: Check and load DRM modules
      shell: |
        # Load DRM modules if not already loaded
        modprobe drm 2>/dev/null || true
        modprobe vc4 2>/dev/null || true
        modprobe drm_kms_helper 2>/dev/null || true
        
        # Show loaded modules
        echo "Loaded DRM modules:"
        lsmod | grep -E "(drm|vc4)" || echo "No DRM modules found"
        
        # Show DRM devices
        echo "DRM devices:"
        ls -la /dev/dri/ 2>/dev/null || echo "No /dev/dri directory"
        
        # Show framebuffer devices
        echo "Framebuffer devices:"
        ls -la /dev/fb* 2>/dev/null || echo "No framebuffer devices"
      register: drm_status
      changed_when: false
    
    - name: Display DRM and framebuffer status
      debug:
        var: drm_status.stdout_lines
  when: target_os == "ubuntu"

- name: Create virtual environment directory
  file:
    path: /opt/slideshow
    state: directory
    mode: 0755

- name: Create Python virtual environment
  command: python3 -m venv {{ venv_path }}
  args:
    creates: "{{ venv_path }}/bin/python"

- name: Install Python libraries in virtual environment (except pygame)
  pip:
    name:
      - requests # Potentially used by hdmi_sleep.py or other utils
      - urllib3  # Potentially used by hdmi_sleep.py or other utils
      # opencv-python, numpy, selenium, Pillow removed as they were for Python slideshow
    virtualenv: "{{ venv_path }}"
# Pygame related tasks are removed as pygame is no longer used.